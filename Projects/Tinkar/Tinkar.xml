<?xml version="1.0"?>
<doc>
    <assembly>
        <name>Tinkar</name>
    </assembly>
    <members>
        <member name="T:Tinkar.DateTimeExtensions">
            <summary>
            DateTime extension methods.
            </summary>
        </member>
        <member name="F:Tinkar.DateTimeExtensions.epochStart">
            <summary>
            Java Instant starts at jan 1, 1970.
            </summary>
        </member>
        <member name="M:Tinkar.DateTimeExtensions.EpochSecond(System.DateTime)">
            <summary>
            Create a java value 'seconds since epochStart' from c# DateTime.
            </summary>
            <param name="dt">DateTime value.</param>
            <returns>Java integer seconds since 1970.</returns>
        </member>
        <member name="M:Tinkar.DateTimeExtensions.Nano(System.DateTime)">
            <summary>
            Create nano seconds from data time milliseconds.
            </summary>
            <param name="dt">Date time value.</param>
            <returns>nanoseconds part of date time.</returns>
        </member>
        <member name="M:Tinkar.DateTimeExtensions.FromInstant(System.Int64,System.Int32)">
            <summary>
            Create C# date time from jave serialized instant fields.
            </summary>
            <param name="epoch">Seconds since (or before) 1970.</param>
            <param name="nanoSeconds">nanoseconds part of instant.</param>
            <returns>read DateTime value.</returns>
        </member>
        <member name="T:Tinkar.IMarshalable">
            <summary>
            Interface for classes that implement marshaling to a binary stream.
            </summary>
        </member>
        <member name="M:Tinkar.IMarshalable.Marshal(Tinkar.TinkarOutput)">
            <summary>
            Marshal class data to binary stream.
            </summary>
            <param name="output">binary output stream.</param>
        </member>
        <member name="T:Tinkar.TinkarByteArrayOutput">
            <summary>
            Tinkar binary output stream that writes to a byte arrray.
            </summary>
        </member>
        <member name="F:Tinkar.TinkarByteArrayOutput.byteArrayOutputStream">
            <summary>
            Store output in this memory stream.
            </summary>
        </member>
        <member name="M:Tinkar.TinkarByteArrayOutput.#ctor(System.IO.MemoryStream)">
            <summary>
            Initializes a new instance of the <see cref="T:Tinkar.TinkarByteArrayOutput"/> class.
            </summary>
            <param name="byteArrayOutputStream">Underlying memory stream.</param>
        </member>
        <member name="M:Tinkar.TinkarByteArrayOutput.Make">
            <summary>
            Create a TinkarByteArrayOutput item.
            </summary>
            <returns>TinkarByteArrayOutput item.</returns>
        </member>
        <member name="M:Tinkar.TinkarByteArrayOutput.GetBytes">
            <summary>
            Get output stream bytes.
            </summary>
            <returns>array or read bytes.</returns>
        </member>
        <member name="M:Tinkar.TinkarByteArrayOutput.ToInput">
            <summary>
            Convert output stream to an input stream
            containing output streams bytes.
            </summary>
            <returns>Tinkar input stream.</returns>
        </member>
        <member name="T:Tinkar.TinkarInput">
            <summary>
            Read data from input stream into Tinkar objects.
            The serialization format read must be compatible the Java Tinkar
            serializer.
            </summary>
        </member>
        <member name="M:Tinkar.TinkarInput.#ctor(System.IO.Stream)">
            <summary>
            Initializes a new instance of the <see cref="T:Tinkar.TinkarInput"/> class.
            </summary>
            <param name="inStream">Binary input stream.</param>
        </member>
        <member name="M:Tinkar.TinkarInput.Dispose">
            <summary>
            Dispose function.
            </summary>
        </member>
        <member name="M:Tinkar.TinkarInput.ReadUTF">
            <summary>
            Read string.
            Note: BinaryReader.ReadString is supposed to be identical to java ReadUTF().
            </summary>
            <returns>String.</returns>
        </member>
        <member name="M:Tinkar.TinkarInput.ReadInt32">
            <summary>
            Read network ordered  Int32 from input stream.
            </summary>
            <returns>Int32.</returns>
        </member>
        <member name="M:Tinkar.TinkarInput.ReadSingle">
            <summary>
            Read network ordered float from input stream.
            </summary>
            <returns>read single value.</returns>
        </member>
        <member name="M:Tinkar.TinkarInput.ReadBoolean">
            <summary>
            Read network ordered boolean from input stream.
            </summary>
            <returns>read boolean value.</returns>
        </member>
        <member name="M:Tinkar.TinkarInput.ReadLong">
            <summary>
            Read network ordered Int64 from input stream.
            </summary>
            <returns>Int64.</returns>
        </member>
        <member name="M:Tinkar.TinkarInput.ReadByteArray">
            <summary>
            Read a byte array from input stream.
            </summary>
            <returns>byte[].</returns>
        </member>
        <member name="M:Tinkar.TinkarInput.ReadUuids">
            <summary>
            Read array of guids from input stream.
            </summary>
            <returns>Guid[].</returns>
        </member>
        <member name="M:Tinkar.TinkarInput.ReadInstant">
            <summary>
            Read data tome from input stream.
            </summary>
            <returns>DateTime.</returns>
        </member>
        <member name="M:Tinkar.TinkarInput.ReadFieldDefinitionList">
            <summary>
            Read an array or FieldDefinitionDTO items.
            </summary>
            <returns>FieldDefinitionDTO[].</returns>
        </member>
        <member name="M:Tinkar.TinkarInput.ReadConceptVersionList(System.Collections.Generic.IEnumerable{System.Guid})">
            <summary>
            Read an array or ConceptVersionDTO items.
            </summary>
            <param name="componentUuids">Component UUIDs.</param>
            <returns>ConceptVersionDTO[].</returns>
        </member>
        <member name="M:Tinkar.TinkarInput.ReadDefinitionForSemanticVersionList(System.Collections.Generic.IEnumerable{System.Guid})">
            <summary>
            Read an array or DefinitionForSemanticVersionDTO items.
            </summary>
            <param name="componentUuids">Component UUIDs.</param>
            <returns>DefinitionForSemanticVersionDTO[].</returns>
        </member>
        <member name="M:Tinkar.TinkarInput.ReadSemanticVersionList(System.Collections.Generic.IEnumerable{System.Guid},System.Collections.Generic.IEnumerable{System.Guid},System.Collections.Generic.IEnumerable{System.Guid})">
            <summary>
            Read an array or SemanticVersionDTO items.
            </summary>
            <param name="componentUuids">Component UUIDs.</param>
            <param name="definitionForSemanticUuids">DefinitionForSemantic UUIDs.</param>
            <param name="referencedComponentUuids">ReferencedComponent UUIDs.</param>
            <returns>SemanticVersionDTO[].</returns>
        </member>
        <member name="M:Tinkar.TinkarInput.ReadObjects">
            <summary>
            Read an array or Object items.
            </summary>
            <returns>Object[].</returns>
        </member>
        <member name="M:Tinkar.TinkarInput.ReadField">
            <summary>
            Read an array or Object fields.
            </summary>
            <returns>Object[].</returns>
        </member>
        <member name="M:Tinkar.TinkarInput.CheckMarshalVersion(System.Int32)">
            <summary>
            Read version number from input stream and compare it to the
            passed expected value. Throw exception if doesnt match.
            </summary>
            <param name="marshalVersion">Expected version.</param>
        </member>
        <member name="T:Tinkar.TinkarOutput">
            <summary>
            Tinkar binary output stream. Writes Tinkar objects to serialized
            binary byte stream.
            </summary>
        </member>
        <member name="F:Tinkar.TinkarOutput.writer">
            <summary>
            Binary writer that gets written to.
            </summary>
        </member>
        <member name="M:Tinkar.TinkarOutput.#ctor(System.IO.Stream)">
            <summary>
            Initializes a new instance of the <see cref="T:Tinkar.TinkarOutput"/> class.
            </summary>
            <param name="outStream">Output stream.</param>
        </member>
        <member name="M:Tinkar.TinkarOutput.Dispose">
            <summary>
            Dispose. This flushes streams and releases underlying output stream.
            If dispose is not called, cached data is not flushed to output stream,
            rendering the underlying output stream truncated.
            </summary>
        </member>
        <member name="M:Tinkar.TinkarOutput.WriteBoolean(System.Boolean)">
            <summary>
            Write boolean to output stream.
            </summary>
            <param name="value">value to write.</param>
        </member>
        <member name="M:Tinkar.TinkarOutput.WriteByteArray(System.Byte[])">
            <summary>
            Write byte array to output stream.
            </summary>
            <param name="value">value to write.</param>
        </member>
        <member name="M:Tinkar.TinkarOutput.WriteSingle(System.Single)">
            <summary>
            Write float to output stream.
            </summary>
            <param name="value">value to write.</param>
        </member>
        <member name="M:Tinkar.TinkarOutput.WriteInt32(System.Int32)">
            <summary>
            Write little endian Int32 to output stream.
            </summary>
            <param name="value">value to write.</param>
        </member>
        <member name="M:Tinkar.TinkarOutput.WriteInt64(System.Int64)">
            <summary>
            Write little endian Int64 to output stream.
            </summary>
            <param name="value">value to write.</param>
        </member>
        <member name="M:Tinkar.TinkarOutput.WriteInstant(System.DateTime)">
            <summary>
            Write out date time.
            </summary>
            <param name="value">value to write.</param>
        </member>
        <member name="M:Tinkar.TinkarOutput.WriteMarshalableList(System.Collections.Generic.IEnumerable{Tinkar.IMarshalable})">
            <summary>
            Write out a series of IMarshalable items.
            </summary>
            <param name="items">Items to write.</param>
        </member>
        <member name="M:Tinkar.TinkarOutput.WriteField(System.Object)">
            <summary>
            Write sinple object field to output stream.
            </summary>
            <param name="field">Value to write.</param>
        </member>
        <member name="M:Tinkar.TinkarOutput.WriteUTF(System.String)">
            <summary>
            Write string.
            Note: BinaryWriter.WriteString is supposed to be identical to java WriteUTF().
            </summary>
            <param name="s">String to write.</param>
        </member>
        <member name="M:Tinkar.TinkarOutput.WriteUuids(System.Collections.Generic.IEnumerable{System.Guid})">
            <summary>
            Write a stream of Uuids (guids) to output stream.
            </summary>
            <param name="statusUuids">values to write.</param>
        </member>
        <member name="M:Tinkar.TinkarOutput.WriteObjects(System.Collections.Generic.IEnumerable{System.Object})">
            <summary>
            Write out a stream ob simple objects.
            </summary>
            <param name="fields">Values to write.</param>
        </member>
        <member name="M:Tinkar.TinkarOutput.WriteMarshalVersion(System.Int32)">
            <summary>
            Write marshal version to output stream.
            </summary>
            <param name="marshalVersion">value to write.</param>
        </member>
        <member name="M:Tinkar.TinkarOutput.WriteFieldType(Tinkar.FieldDataType)">
            <summary>
            Write field type to output stream.
            </summary>
            <param name="fieldType">value to write.</param>
        </member>
        <member name="T:Tinkar.IChangeSetThing">
            <summary>
            ???.
            </summary>
        </member>
        <member name="T:Tinkar.IChronology`2">
            <summary>
            Chronology interaface.
            </summary>
            <typeparam name="TVersion">Version type.</typeparam>
            <typeparam name="TIdentifiedThing">Thing type.</typeparam>
        </member>
        <member name="P:Tinkar.IChronology`2.ChronologySet">
            <summary>
            Gets ChronologySet.
            </summary>
        </member>
        <member name="P:Tinkar.IChronology`2.Versions">
            <summary>
            Gets versions.
            </summary>
        </member>
        <member name="T:Tinkar.IConcept">
            <summary>
            Identified thing interface. This is a base interface for most of the
            other Tinkar record intefaces.
            </summary>
        </member>
        <member name="T:Tinkar.IConceptChronology`1">
            <summary>
            ConceptChronology interface.
            </summary>
            <typeparam name="TIdentifiedThing">IChronology identified thing generic parameter.</typeparam>
        </member>
        <member name="T:Tinkar.IConceptVersion">
            <summary>
            Tinkar Concept Version interface.
            </summary>
        </member>
        <member name="T:Tinkar.IDefinitionForSemantic">
            <summary>
            Definition for Semantic interface.
            </summary>
        </member>
        <member name="T:Tinkar.IDefinitionForSemanticChronology`1">
            <summary>
            DefinitionForSemanticChronology interace.
            </summary>
            <typeparam name="TIdentifiedThing">Generic type for IChronology. </typeparam>
        </member>
        <member name="T:Tinkar.IDefinitionForSemanticVersion">
            <summary>
            Defines the fields and purpose of a Semantic Version.
            SemanticVersion instances all reference a IDefinitionForSemanticVersion
            to define the expected fields of that Semantic Version.
            </summary>
        </member>
        <member name="P:Tinkar.IDefinitionForSemanticVersion.FieldDefinitions">
            <summary>
            Gets the SemanticVersion field definitions.
            </summary>
        </member>
        <member name="P:Tinkar.IDefinitionForSemanticVersion.ReferencedComponentPurpose">
            <summary>
            Gets the purpose of referenced component.
            </summary>
        </member>
        <member name="T:Tinkar.IFieldDefinition">
            <summary>
            Tinkar interface for Field Definition.
            </summary>
        </member>
        <member name="P:Tinkar.IFieldDefinition.DataType">
            <summary>
             Gets underlying object type such as String or Integer.
             @return Concept designating the data type of the defined field.
            </summary>
        </member>
        <member name="P:Tinkar.IFieldDefinition.Purpose">
            <summary>
            Gets what the object represents: a String might be a URI,
            a component identifier might represent a mapping, or an
            integer might represent a coordinate.
            @return Concept designating the purpose of the defined field.
            </summary>
        </member>
        <member name="P:Tinkar.IFieldDefinition.Use">
            <summary>
            Gets the context in which this specific field is used. Maybe it is the
            "SNOMED code" in a mapping, or the location of an image if a URI.
            @return Concept designating the use of the defined field.
            </summary>
        </member>
        <member name="T:Tinkar.IIdentifiedThing">
            <summary>
            Tinkar base interface for all identified 'things'.
            </summary>
        </member>
        <member name="P:Tinkar.IIdentifiedThing.ComponentUuids">
            <summary>
            Gets component uuids.
            </summary>
        </member>
        <member name="T:Tinkar.ISemantic">
            <summary>
            Tinkar Semantic interface.
            </summary>
        </member>
        <member name="P:Tinkar.ISemantic.ReferencedComponent">
            <summary>
            Gets component that this semantic references.
            </summary>
        </member>
        <member name="P:Tinkar.ISemantic.DefinitionForSemantic">
            <summary>
            Gets DefinitionForSemantic.
            </summary>
        </member>
        <member name="T:Tinkar.ISemanticChronology`1">
            <summary>
            Tinkar Semantic Chronology interface.
            </summary>
            <typeparam name="TIdentifiedThing">Generic param for IChnronology interface.</typeparam>
        </member>
        <member name="T:Tinkar.ISemanticVersion">
            <summary>
            Tinkar Semantic Version Interface.
            </summary>
        </member>
        <member name="P:Tinkar.ISemanticVersion.Fields">
            <summary>
            Gets semantic version fields.
            </summary>
        </member>
        <member name="T:Tinkar.IStamp">
            <summary>
            Tinkar Stamp interface.
            </summary>
        </member>
        <member name="P:Tinkar.IStamp.Status">
            <summary>
            Gets stamp status.
            </summary>
        </member>
        <member name="P:Tinkar.IStamp.Time">
            <summary>
            Gets stamp time.
            </summary>
        </member>
        <member name="P:Tinkar.IStamp.Author">
            <summary>
            Gets stamp author.
            </summary>
        </member>
        <member name="P:Tinkar.IStamp.Module">
            <summary>
            Gets stamp module.
            </summary>
        </member>
        <member name="P:Tinkar.IStamp.Path">
            <summary>
            Gets stamp path.
            </summary>
        </member>
        <member name="T:Tinkar.IStampExtensions">
            <summary>
            IStamp interface extension methods.
            </summary>
        </member>
        <member name="M:Tinkar.IStampExtensions.ToChangeSetThing(Tinkar.IStamp)">
            <summary>
            Create StampDTO from an IStamp.
            </summary>
            <param name="me">Extension method operated on this element.</param>
            <returns>Stamp.</returns>
        </member>
        <member name="T:Tinkar.IStampComment">
            <summary>
            Tinkar Stamp with comment interface.
            </summary>
        </member>
        <member name="P:Tinkar.IStampComment.Stamp">
            <summary>
            Gets stamp.
            </summary>
        </member>
        <member name="P:Tinkar.IStampComment.Comment">
            <summary>
            Gets Comment field.
            </summary>
        </member>
        <member name="T:Tinkar.IVersion">
            <summary>
            Tinkar Version Interface. This is the base interface
            for many specialized Tinkar Version interfaces.
            </summary>
        </member>
        <member name="P:Tinkar.IVersion.Stamp">
            <summary>
            Gets stamp for version.
            </summary>
        </member>
        <member name="T:Tinkar.BaseDTO`1">
            <summary>
            Base class for all Tinkar DTO classes.
            </summary>
            <typeparam name="TDto">Type of concrete child class.</typeparam>
        </member>
        <member name="M:Tinkar.BaseDTO`1.IsEquivalent(`0)">
            <summary>
            Implementation of IEquivalent.IsEquivalent
            We manually create this rather than using the default
            record implementation because we want to compare to
            do a deep comparison, not just compare reference equality.
            </summary>
            <param name="other">Item to compare to for equivalence.</param>
            <returns>true if equal.</returns>
        </member>
        <member name="M:Tinkar.BaseDTO`1.CompareTo(`0)">
            <summary>
            Compare two items of same DTO type.
            An exception is thrown if an attempt is made to compare obects
            of different types.
            </summary>
            <param name="obj">object to compare to.</param>
            <returns>Int32.</returns>
        </member>
        <member name="T:Tinkar.ConceptChronologyDTO">
            <summary>
            Tinkar ConceptChronology record.
            </summary>
        </member>
        <member name="F:Tinkar.ConceptChronologyDTO.MarshalVersion">
            <summary>
            Version of marshalling code.
            If code is modified in a way that renders old serialized data
            non-conformant, then this number should be incremented.
            </summary>
        </member>
        <member name="F:Tinkar.ConceptChronologyDTO.JsonClassName">
            <summary>
            Name of this class in JSON serialization.
            This must be consistent with Java implementation.
            </summary>
        </member>
        <member name="P:Tinkar.ConceptChronologyDTO.ChronologySet">
            <summary>
            Gets ChronologySet.
            </summary>
        </member>
        <member name="P:Tinkar.ConceptChronologyDTO.ComponentUuids">
            <summary>
            Gets Component UUIDs.
            </summary>
        </member>
        <member name="P:Tinkar.ConceptChronologyDTO.ChronologySetUuids">
            <summary>
            Gets ChronologySet UUIDs.
            </summary>
        </member>
        <member name="P:Tinkar.ConceptChronologyDTO.ConceptVersions">
            <summary>
            Gets ConceptVersions.
            </summary>
        </member>
        <member name="P:Tinkar.ConceptChronologyDTO.Versions">
            <summary>
            Gets Versions.
            </summary>
        </member>
        <member name="M:Tinkar.ConceptChronologyDTO.#ctor(System.Collections.Generic.IEnumerable{System.Guid},System.Collections.Generic.IEnumerable{System.Guid},System.Collections.Generic.IEnumerable{Tinkar.ConceptVersionDTO})">
            <summary>
            Initializes a new instance of the <see cref="T:Tinkar.ConceptChronologyDTO"/> class.
            </summary>
            <param name="componentUuids">ComponentUuids.</param>
            <param name="chronologySetUuids">ChronologySetUuids.</param>
            <param name="conceptVersions">ConceptVersions.</param>
        </member>
        <member name="M:Tinkar.ConceptChronologyDTO.#ctor(Tinkar.TinkarInput)">
            <summary>
            Initializes a new instance of the <see cref="T:Tinkar.ConceptChronologyDTO"/> class
            from a TinkarInput Stream.
            </summary>
            <param name="input">input data stream.</param>
        </member>
        <member name="M:Tinkar.ConceptChronologyDTO.#ctor(Newtonsoft.Json.Linq.JObject)">
            <summary>
            Initializes a new instance of the <see cref="T:Tinkar.ConceptChronologyDTO"/> class
            from json stream.
            </summary>
            <param name="jObj">JSON parent container to read from.</param>
        </member>
        <member name="M:Tinkar.ConceptChronologyDTO.CompareTo(Tinkar.ConceptChronologyDTO)">
            <summary>
            Compares this to another item.
            </summary>
            <param name="other">Item to compare to.</param>
            <returns>-1, 0, or 1.</returns>
        </member>
        <member name="M:Tinkar.ConceptChronologyDTO.Make(Tinkar.TinkarInput)">
            <summary>
            Static method to Create DTO item from input stream.
            </summary>
            <param name="input">input data stream.</param>
            <returns>new DTO item.</returns>
        </member>
        <member name="M:Tinkar.ConceptChronologyDTO.Marshal(Tinkar.TinkarOutput)">
            <summary>
            Marshal DTO item to output stream.
            </summary>
            <param name="output">output data stream.</param>
        </member>
        <member name="M:Tinkar.ConceptChronologyDTO.Make(Newtonsoft.Json.Linq.JObject)">
            <summary>
            Static method to Create DTO item from json stream.
            </summary>
            <param name="jObj">JSON parent container.</param>
            <returns>new DTO item.</returns>
        </member>
        <member name="M:Tinkar.ConceptChronologyDTO.Marshal(Tinkar.TinkarJsonOutput)">
            <summary>
            Marshal all fields to Json output stream.
            </summary>
            <param name="output">Json output stream.</param>
        </member>
        <member name="T:Tinkar.ConceptDTO">
            <summary>
            Concept record.
            </summary>
        </member>
        <member name="F:Tinkar.ConceptDTO.MarshalVersion">
            <summary>
            Version of marshalling code.
            If code is modified in a way that renders old serialized data
            non-conformant, then this number should be incremented.
            </summary>
        </member>
        <member name="F:Tinkar.ConceptDTO.JsonClassName">
            <summary>
            Name of this class in JSON serialization.
            This must be consistent with Java implementation.
            </summary>
        </member>
        <member name="P:Tinkar.ConceptDTO.ComponentUuids">
            <summary>
            Gets Component UUIDs.
            </summary>
        </member>
        <member name="M:Tinkar.ConceptDTO.#ctor(System.Collections.Generic.IEnumerable{System.Guid})">
            <summary>
            Initializes a new instance of the <see cref="T:Tinkar.ConceptDTO"/> class.
            </summary>
            <param name="componentUuids">ComponentUuids.</param>
        </member>
        <member name="M:Tinkar.ConceptDTO.#ctor(Newtonsoft.Json.Linq.JObject)">
            <summary>
            Initializes a new instance of the <see cref="T:Tinkar.ConceptDTO"/> class
            from json stream.
            </summary>
            <param name="jObj">JSON parent container to read from.</param>
        </member>
        <member name="M:Tinkar.ConceptDTO.#ctor(Tinkar.TinkarInput)">
            <summary>
            Initializes a new instance of the <see cref="T:Tinkar.ConceptDTO"/> class
            from binary stream.
            </summary>
            <param name="input">input data stream.</param>
        </member>
        <member name="M:Tinkar.ConceptDTO.CompareTo(Tinkar.ConceptDTO)">
            <summary>
            Compares this to another item.
            </summary>
            <param name="other">Item to compare to.</param>
            <returns>-1, 0, or 1.</returns>
        </member>
        <member name="M:Tinkar.ConceptDTO.Make(Tinkar.TinkarInput)">
            <summary>
            Static method to Create DTO item from input stream.
            </summary>
            <param name="input">input data stream.</param>
            <returns>new DTO item.</returns>
        </member>
        <member name="M:Tinkar.ConceptDTO.Marshal(Tinkar.TinkarOutput)">
            <summary>
            Marshal DTO item to output stream.
            </summary>
            <param name="output">output data stream.</param>
        </member>
        <member name="M:Tinkar.ConceptDTO.Make(Newtonsoft.Json.Linq.JObject)">
            <summary>
            Static method to Create DTO item from json .
            </summary>
            <param name="jObj">JSON parent container to read from.</param>
            <returns>ConceptDTO record.</returns>
        </member>
        <member name="M:Tinkar.ConceptDTO.Marshal(Tinkar.TinkarJsonOutput)">
            <summary>
            Marshal all fields to Json output stream.
            </summary>
            <param name="output">Json output stream.</param>
        </member>
        <member name="T:Tinkar.ConceptVersionDTO">
            <summary>
            ConceptVersion record.
            </summary>
        </member>
        <member name="F:Tinkar.ConceptVersionDTO.MarshalVersion">
            <summary>
            Version of marshalling code.
            If code is modified in a way that renders old serialized data
            non-conformant, then this number should be incremented.
            </summary>
        </member>
        <member name="F:Tinkar.ConceptVersionDTO.JsonClassName">
            <summary>
            Name of this class in JSON serialization.
            This must be consistent with Java implementation.
            </summary>
        </member>
        <member name="P:Tinkar.ConceptVersionDTO.ComponentUuids">
            <summary>
            Gets the concept version component uuids.
            </summary>
        </member>
        <member name="P:Tinkar.ConceptVersionDTO.StampDTO">
            <summary>
            Gets the Stamp DTO.
            </summary>
        </member>
        <member name="P:Tinkar.ConceptVersionDTO.Stamp">
            <summary>
            Gets the Stamp.
            </summary>
        </member>
        <member name="M:Tinkar.ConceptVersionDTO.#ctor(System.Collections.Generic.IEnumerable{System.Guid},Tinkar.StampDTO)">
            <summary>
            Initializes a new instance of the <see cref="T:Tinkar.ConceptVersionDTO"/> class.
            </summary>
            <param name="componentUuids">Component Uuids.</param>
            <param name="stampDTO">Stamp.</param>
        </member>
        <member name="M:Tinkar.ConceptVersionDTO.#ctor(Tinkar.TinkarInput,System.Collections.Generic.IEnumerable{System.Guid})">
            <summary>
            Initializes a new instance of the <see cref="T:Tinkar.ConceptVersionDTO"/> class
            from binary stream.
            </summary>
            <param name="input">binary input stream.</param>
            <param name="componentUuids">component uuids.</param>
        </member>
        <member name="M:Tinkar.ConceptVersionDTO.#ctor(Newtonsoft.Json.Linq.JObject,System.Collections.Generic.IEnumerable{System.Guid})">
            <summary>
            Initializes a new instance of the <see cref="T:Tinkar.ConceptVersionDTO"/> class.
            from input JSON stream.
            </summary>
            <param name="jObj">JSON parent container.</param>
            <param name="componentUuids">component uuids.</param>
        </member>
        <member name="M:Tinkar.ConceptVersionDTO.CompareTo(Tinkar.ConceptVersionDTO)">
            <summary>
            Compares this to another item.
            </summary>
            <param name="other">Item to compare to.</param>
            <returns>-1, 0, or 1.</returns>
        </member>
        <member name="M:Tinkar.ConceptVersionDTO.Make(Tinkar.TinkarInput,System.Collections.Generic.IEnumerable{System.Guid})">
            <summary>
            Static method to Create DTO item from input stream.
            </summary>
            <param name="input">input data stream.</param>
            <param name="componentUuids">Component UUIDs.</param>
            <returns>new DTO item.</returns>
        </member>
        <member name="M:Tinkar.ConceptVersionDTO.Marshal(Tinkar.TinkarOutput)">
            <summary>
            Marshal all fields to binary output stream.
            </summary>
            <param name="output">Json output stream.</param>
        </member>
        <member name="M:Tinkar.ConceptVersionDTO.Make(Newtonsoft.Json.Linq.JObject,System.Collections.Generic.IEnumerable{System.Guid})">
            <summary>
            Static method to Create DTO item from input stream.
            </summary>
            <param name="jObj">JSON parent container.</param>
            <param name="componentUuids">Component UUIDs.</param>
            <returns>new DTO item.</returns>
        </member>
        <member name="M:Tinkar.ConceptVersionDTO.Marshal(Tinkar.TinkarJsonOutput)">
            <summary>
            Marshal all fields to Json output stream.
            </summary>
            <param name="output">Json output stream.</param>
        </member>
        <member name="T:Tinkar.DefinitionForSemanticChronologyDTO">
            <summary>
            Tinkar DefinitionForSemanticChronology record.
            </summary>
        </member>
        <member name="F:Tinkar.DefinitionForSemanticChronologyDTO.MarshalVersion">
            <summary>
            Version of marshalling code.
            If code is modified in a way that renders old serialized data
            non-conformant, then this number should be incremented.
            </summary>
        </member>
        <member name="F:Tinkar.DefinitionForSemanticChronologyDTO.JsonClassName">
            <summary>
            Name of this class in JSON serialization.
            This must be consistent with Java implementation.
            </summary>
        </member>
        <member name="P:Tinkar.DefinitionForSemanticChronologyDTO.ComponentUuids">
            <summary>
            Gets Component UUIDs.
            </summary>
        </member>
        <member name="P:Tinkar.DefinitionForSemanticChronologyDTO.DefinitionVersions">
            <summary>
            Gets Versions record.
            </summary>
        </member>
        <member name="P:Tinkar.DefinitionForSemanticChronologyDTO.Versions">
            <summary>
            Gets Versions.
            </summary>
        </member>
        <member name="P:Tinkar.DefinitionForSemanticChronologyDTO.ChronologySet">
            <summary>
            Gets ChronologySet.
            </summary>
        </member>
        <member name="P:Tinkar.DefinitionForSemanticChronologyDTO.ChronologySetUuids">
            <summary>
            Gets ChronologySet UUIDs.
            </summary>
        </member>
        <member name="M:Tinkar.DefinitionForSemanticChronologyDTO.#ctor(System.Collections.Generic.IEnumerable{System.Guid},System.Collections.Generic.IEnumerable{System.Guid},System.Collections.Generic.IEnumerable{Tinkar.DefinitionForSemanticVersionDTO})">
            <summary>
            Initializes a new instance of the <see cref="T:Tinkar.DefinitionForSemanticChronologyDTO"/> class.
            </summary>
            <param name="componentUuids">ComponentUuids.</param>
            <param name="chronologySetUuids">ChronologySetUuids.</param>
            <param name="definitionVersions">DefinitionVersions.</param>
        </member>
        <member name="M:Tinkar.DefinitionForSemanticChronologyDTO.#ctor(Tinkar.TinkarInput)">
            <summary>
            Initializes a new instance of the <see cref="T:Tinkar.DefinitionForSemanticChronologyDTO"/> class
            from binary stream.
            </summary>
            <param name="input">input data stream.</param>
        </member>
        <member name="M:Tinkar.DefinitionForSemanticChronologyDTO.#ctor(Newtonsoft.Json.Linq.JObject)">
            <summary>
            Initializes a new instance of the <see cref="T:Tinkar.DefinitionForSemanticChronologyDTO"/> class
            from json stream.
            </summary>
            <param name="jObj">JSON parent container.</param>
        </member>
        <member name="M:Tinkar.DefinitionForSemanticChronologyDTO.CompareTo(Tinkar.DefinitionForSemanticChronologyDTO)">
            <summary>
            Compares this to another item.
            </summary>
            <param name="other">Item to compare to.</param>
            <returns>-1, 0, or 1.</returns>
        </member>
        <member name="M:Tinkar.DefinitionForSemanticChronologyDTO.Make(Tinkar.TinkarInput)">
            <summary>
            Static method to Create DTO item from input stream.
            </summary>
            <param name="input">input data stream.</param>
            <returns>new DTO item.</returns>
        </member>
        <member name="M:Tinkar.DefinitionForSemanticChronologyDTO.Marshal(Tinkar.TinkarOutput)">
            <summary>
            Marshal DTO item to output stream.
            </summary>
            <param name="output">output data stream.</param>
        </member>
        <member name="M:Tinkar.DefinitionForSemanticChronologyDTO.Make(Newtonsoft.Json.Linq.JObject)">
            <summary>
            Static method to Create DTO item from input stream.
            </summary>
            <param name="jObj">JSON parent container.</param>
            <returns>new DTO item.</returns>
        </member>
        <member name="M:Tinkar.DefinitionForSemanticChronologyDTO.Marshal(Tinkar.TinkarJsonOutput)">
            <summary>
            Marshal all fields to Json output stream.
            </summary>
            <param name="output">Json output stream.</param>
        </member>
        <member name="T:Tinkar.DefinitionForSemanticDTO">
            <summary>
            DefinitionForSemantic record.
            </summary>
        </member>
        <member name="F:Tinkar.DefinitionForSemanticDTO.MarshalVersion">
            <summary>
            Version of marshalling code.
            If code is modified in a way that renders old serialized data
            non-conformant, then this number should be incremented.
            </summary>
        </member>
        <member name="F:Tinkar.DefinitionForSemanticDTO.JsonClassName">
            <summary>
            Name of this class in JSON serialization.
            This must be consistent with Java implementation.
            </summary>
        </member>
        <member name="P:Tinkar.DefinitionForSemanticDTO.ComponentUuids">
            <summary>
            Gets Component UUIDs.
            </summary>
        </member>
        <member name="M:Tinkar.DefinitionForSemanticDTO.#ctor(System.Collections.Generic.IEnumerable{System.Guid})">
            <summary>
            Initializes a new instance of the <see cref="T:Tinkar.DefinitionForSemanticDTO"/> class.
            </summary>
            <param name="componentUuids">ComponentUuids.</param>
        </member>
        <member name="M:Tinkar.DefinitionForSemanticDTO.#ctor(Newtonsoft.Json.Linq.JObject)">
            <summary>
            Initializes a new instance of the <see cref="T:Tinkar.DefinitionForSemanticDTO"/> class
            from json stream.
            </summary>
            <param name="jObj">JSON parent container to read from.</param>
        </member>
        <member name="M:Tinkar.DefinitionForSemanticDTO.#ctor(Tinkar.TinkarInput)">
            <summary>
            Initializes a new instance of the <see cref="T:Tinkar.DefinitionForSemanticDTO"/> class
            from input stream.
            </summary>
            <param name="input">input data stream.</param>
        </member>
        <member name="M:Tinkar.DefinitionForSemanticDTO.CompareTo(Tinkar.DefinitionForSemanticDTO)">
            <summary>
            Compares this to another item.
            </summary>
            <param name="other">Item to compare to.</param>
            <returns>-1, 0, or 1.</returns>
        </member>
        <member name="M:Tinkar.DefinitionForSemanticDTO.Make(Tinkar.TinkarInput)">
            <summary>
            Static method to Create DTO item from input stream.
            </summary>
            <param name="input">input data stream.</param>
            <returns>new DTO item.</returns>
        </member>
        <member name="M:Tinkar.DefinitionForSemanticDTO.Marshal(Tinkar.TinkarOutput)">
            <summary>
            Marshal DTO item to output stream.
            </summary>
            <param name="output">output data stream.</param>
        </member>
        <member name="M:Tinkar.DefinitionForSemanticDTO.Make(Newtonsoft.Json.Linq.JObject)">
            <summary>
            Static method to Create DTO item from json .
            </summary>
            <param name="jObj">JSON parent container to read from.</param>
            <returns>Deserialized DefinitionForSemanticDTO record.</returns>
        </member>
        <member name="M:Tinkar.DefinitionForSemanticDTO.Marshal(Tinkar.TinkarJsonOutput)">
            <summary>
            Marshal all fields to Json output stream.
            </summary>
            <param name="output">Json output stream.</param>
        </member>
        <member name="T:Tinkar.DefinitionForSemanticVersionDTO">
            <summary>
            Tinkar DefinitionForSemanticVersion record.
            </summary>
        </member>
        <member name="F:Tinkar.DefinitionForSemanticVersionDTO.MarshalVersion">
            <summary>
            Version of marshalling code.
            If code is modified in a way that renders old serialized data
            non-conformant, then this number should be incremented.
            </summary>
        </member>
        <member name="F:Tinkar.DefinitionForSemanticVersionDTO.JsonClassName">
            <summary>
            Name of this class in JSON serialization.
            This must be consistent with Java implementation.
            </summary>
        </member>
        <member name="P:Tinkar.DefinitionForSemanticVersionDTO.ComponentUuids">
            <summary>
            Gets Component UUIDs.
            </summary>
        </member>
        <member name="P:Tinkar.DefinitionForSemanticVersionDTO.Stamp">
            <summary>
            Gets Stamp.
            </summary>
        </member>
        <member name="P:Tinkar.DefinitionForSemanticVersionDTO.ReferencedComponentPurpose">
            <summary>
            Gets ReferencedComponentPurpose.
            </summary>
        </member>
        <member name="P:Tinkar.DefinitionForSemanticVersionDTO.FieldDefinitions">
            <summary>
            Gets FieldDefinitions.
            </summary>
        </member>
        <member name="P:Tinkar.DefinitionForSemanticVersionDTO.StampDTO">
            <summary>
            Gets Stamp record.
            </summary>
        </member>
        <member name="P:Tinkar.DefinitionForSemanticVersionDTO.ReferencedComponentPurposeUuids">
            <summary>
            Gets ReferencedComponentPurpose UUIDs.
            </summary>
        </member>
        <member name="P:Tinkar.DefinitionForSemanticVersionDTO.FieldDefinitionDTOs">
            <summary>
            Gets FieldDefinition UUIDs.
            </summary>
        </member>
        <member name="M:Tinkar.DefinitionForSemanticVersionDTO.#ctor(System.Collections.Generic.IEnumerable{System.Guid},Tinkar.StampDTO,System.Collections.Generic.IEnumerable{System.Guid},System.Collections.Generic.IEnumerable{Tinkar.FieldDefinitionDTO})">
            <summary>
            Initializes a new instance of the <see cref="T:Tinkar.DefinitionForSemanticVersionDTO"/> class.
            </summary>
            <param name="componentUuids">ComponentUuids.</param>
            <param name="stampDTO">StampDTO.</param>
            <param name="referencedComponentPurposeUuids">ReferencedComponentPurposeUuids.</param>
            <param name="fieldDefinitionDTOs">FieldDefinitionDTOs.</param>
        </member>
        <member name="M:Tinkar.DefinitionForSemanticVersionDTO.#ctor(Newtonsoft.Json.Linq.JObject,System.Collections.Generic.IEnumerable{System.Guid})">
            <summary>
            Initializes a new instance of the <see cref="T:Tinkar.DefinitionForSemanticVersionDTO"/> class
            from json stream.
            </summary>
            <param name="jObj">JSON parent container to read from.</param>
            <param name="componentUuids">Component UUIDs.</param>
        </member>
        <member name="M:Tinkar.DefinitionForSemanticVersionDTO.#ctor(Tinkar.TinkarInput,System.Collections.Generic.IEnumerable{System.Guid})">
            <summary>
            Initializes a new instance of the <see cref="T:Tinkar.DefinitionForSemanticVersionDTO"/> class
            from binary stream.
            </summary>
            <param name="input">input data stream.</param>
            <param name="componentUuids">Component UUIDs.</param>
        </member>
        <member name="M:Tinkar.DefinitionForSemanticVersionDTO.CompareTo(Tinkar.DefinitionForSemanticVersionDTO)">
            <summary>
            Compares this to another item.
            </summary>
            <param name="other">Item to compare to.</param>
            <returns>-1, 0, or 1.</returns>
        </member>
        <member name="M:Tinkar.DefinitionForSemanticVersionDTO.Make(Tinkar.TinkarInput,System.Collections.Generic.IEnumerable{System.Guid})">
            <summary>
            Static method to Create DTO item from input stream.
            </summary>
            <param name="input">input data stream.</param>
            <param name="componentUuids">Component UUIDs.</param>
            <returns>new DTO item.</returns>
        </member>
        <member name="M:Tinkar.DefinitionForSemanticVersionDTO.Marshal(Tinkar.TinkarOutput)">
            <summary>
            Marshal DTO item to output stream.
            </summary>
            <param name="output">output data stream.</param>
        </member>
        <member name="M:Tinkar.DefinitionForSemanticVersionDTO.Make(Newtonsoft.Json.Linq.JObject,System.Collections.Generic.IEnumerable{System.Guid})">
            <summary>
            Static method to Create DTO item from json .
            </summary>
            <param name="jObj">JSON parent container to read from.</param>
            <param name="componentUuids">Component UUIDs.</param>
            <returns>Deserialized DefinitionForSemanticVersion record.</returns>
        </member>
        <member name="M:Tinkar.DefinitionForSemanticVersionDTO.Marshal(Tinkar.TinkarJsonOutput)">
            <summary>
            Marshal all fields to Json output stream.
            </summary>
            <param name="output">Json output stream.</param>
        </member>
        <member name="T:Tinkar.TreeDTO">
            <summary>
            Tree Record.
            </summary>
        </member>
        <member name="T:Tinkar.FieldCompare">
            <summary>
            Class that implements static methods to support field comparison.
            </summary>
        </member>
        <member name="M:Tinkar.FieldCompare.CompareItem``1(``0,``0)">
            <summary>
            Compare two IComparable instances.
            </summary>
            <typeparam name="TItem">Items types to compare.</typeparam>
            <param name="a">First item to compare.</param>
            <param name="b">Second item to compare.</param>
            <returns>&lt; if a &lt; b, 0 if a == b, &gt; if a &gt; b.</returns>
        </member>
        <member name="M:Tinkar.FieldCompare.CompareByteArray(System.Byte[],System.Byte[])">
            <summary>
            Compare two IEnumerable&lt;Guid&gt; instances and return true if each has the same
            Guid values.
            </summary>
            <param name="a">First item to compare.</param>
            <param name="b">Second item to compare.</param>
            <returns>&lt; if a &lt; b, 0 if a == b, &gt; if a &gt; b.</returns>
        </member>
        <member name="M:Tinkar.FieldCompare.CompareGuids(System.Collections.Generic.IEnumerable{System.Guid},System.Collections.Generic.IEnumerable{System.Guid})">
            <summary>
            Compare two IEnumerable&lt;Guid&gt; instances and return true if each has the same
            Guid values.
            </summary>
            <param name="a">First item to compare.</param>
            <param name="b">Second item to compare.</param>
            <returns>&lt; if a &lt; b, 0 if a == b, &gt; if a &gt; b.</returns>
        </member>
        <member name="M:Tinkar.FieldCompare.CompareSequence``1(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{``0})">
            <summary>
            Compare two IEnumerable&lt;IComparable&gt; instances and return true if list contains
            items that are equal.
            </summary>
            <typeparam name="TSeq">Sequence type to compare.</typeparam>
            <param name="a">First item to compare.</param>
            <param name="b">Second item to compare.</param>
            <returns>&lt; if a &lt; b, 0 if a == b, &gt; if a &gt; b.</returns>
        </member>
        <member name="M:Tinkar.FieldCompare.Compare(System.Object[],System.Object[])">
            <summary>
            Compare two Object arrays.
            </summary>
            <param name="a">First item to compare.</param>
            <param name="b">Second item to compare.</param>
            <returns>&lt; if a &lt; b, 0 if a == b, &gt; if a &gt; b.</returns>
        </member>
        <member name="M:Tinkar.FieldCompare.Equivalent(System.Object,System.Object)">
            <summary>
            Returns true if two bojects are equivalent, or the same with
            a deep comparison.
            </summary>
            <param name="aObj">First item to compare.</param>
            <param name="bObj">Second item to compare.</param>
            <returns>true if equivalent.</returns>
        </member>
        <member name="M:Tinkar.FieldCompare.Compare(System.Object,System.Object)">
            <summary>
            Compares two objects for 'sameness'. Does deep compare.
            </summary>
            <param name="aObj">First objec to compare.</param>
            <param name="bObj">Second object to compare.</param>
            <returns>&lt; if a &lt; b, 0 if a == b, &gt; if a &gt; b.</returns>
        </member>
        <member name="T:Tinkar.FieldDataType">
            <summary>
            Field data type enumeration. Unique value for each
            data type that can be serializzed.
            </summary>
        </member>
        <member name="F:Tinkar.FieldDataType.StringType">
            <summary>
            String type.
            </summary>
        </member>
        <member name="F:Tinkar.FieldDataType.IntegerType">
            <summary>
            Integer Type.
            </summary>
        </member>
        <member name="F:Tinkar.FieldDataType.FloatType">
            <summary>
            Float Type.
            </summary>
        </member>
        <member name="F:Tinkar.FieldDataType.BooleanType">
            <summary>
            Boolean Type.
            </summary>
        </member>
        <member name="F:Tinkar.FieldDataType.ByteArrayType">
            <summary>
            ByteArray Type.
            </summary>
        </member>
        <member name="F:Tinkar.FieldDataType.ObjectArrayType">
            <summary>
            ObjectArray Type.
            </summary>
        </member>
        <member name="F:Tinkar.FieldDataType.DiGraphType">
            <summary>
            DiGraph Type.
            </summary>
        </member>
        <member name="F:Tinkar.FieldDataType.InstantType">
            <summary>
            Instant Type.
            </summary>
        </member>
        <member name="F:Tinkar.FieldDataType.ConceptChronologyType">
            <summary>
            ConceptChronology Type.
            </summary>
        </member>
        <member name="F:Tinkar.FieldDataType.ConceptType">
            <summary>
            Concept Type.
            </summary>
        </member>
        <member name="F:Tinkar.FieldDataType.DefinitionForSemanticChronologyType">
            <summary>
            DefinitionForSemanticChronology Type.
            </summary>
        </member>
        <member name="F:Tinkar.FieldDataType.DefinitionForSemanticType">
            <summary>
            DefinitionForSemantic Type.
            </summary>
        </member>
        <member name="F:Tinkar.FieldDataType.SemanticChronologyType">
            <summary>
            SemanticChronology Type.
            </summary>
        </member>
        <member name="F:Tinkar.FieldDataType.SemanticType">
            <summary>
            Semantic Type.
            </summary>
        </member>
        <member name="F:Tinkar.FieldDataType.IdentifiedThingType">
            <summary>
            IdentifiedThing Type.
            </summary>
        </member>
        <member name="T:Tinkar.FieldDefinitionDTO">
            <summary>
            FieldDefinition record.
            </summary>
        </member>
        <member name="F:Tinkar.FieldDefinitionDTO.MarshalVersion">
            <summary>
            Version of marshalling code.
            If code is modified in a way that renders old serialized data
            non-conformant, then this number should be incremented.
            </summary>
        </member>
        <member name="F:Tinkar.FieldDefinitionDTO.JsonClassName">
            <summary>
            Name of this class in JSON serialization.
            This must be consistent with Java implementation.
            </summary>
        </member>
        <member name="P:Tinkar.FieldDefinitionDTO.DataType">
            <summary>
            Gets DataType record.
            </summary>
        </member>
        <member name="P:Tinkar.FieldDefinitionDTO.Purpose">
            <summary>
            Gets Purpose concept.
            </summary>
        </member>
        <member name="P:Tinkar.FieldDefinitionDTO.Use">
            <summary>
            Gets Use concept.
            </summary>
        </member>
        <member name="P:Tinkar.FieldDefinitionDTO.DataTypeUuids">
            <summary>
            Gets DataType uuids.
            </summary>
        </member>
        <member name="P:Tinkar.FieldDefinitionDTO.PurposeUuids">
            <summary>
            Gets Purpose UUIDs.
            </summary>
        </member>
        <member name="P:Tinkar.FieldDefinitionDTO.UseUuids">
            <summary>
            Gets Use uuids.
            </summary>
        </member>
        <member name="M:Tinkar.FieldDefinitionDTO.#ctor(System.Collections.Generic.IEnumerable{System.Guid},System.Collections.Generic.IEnumerable{System.Guid},System.Collections.Generic.IEnumerable{System.Guid})">
            <summary>
            Initializes a new instance of the <see cref="T:Tinkar.FieldDefinitionDTO"/> class.
            </summary>
            <param name="dataTypeUuids">DataTypeUuids.</param>
            <param name="purposeUuids">PurposeUuids.</param>
            <param name="useUuids">useUuids.</param>
        </member>
        <member name="M:Tinkar.FieldDefinitionDTO.#ctor(Tinkar.TinkarInput)">
            <summary>
            Initializes a new instance of the <see cref="T:Tinkar.FieldDefinitionDTO"/> class
            from binary stream.
            </summary>
            <param name="input">input data stream.</param>
        </member>
        <member name="M:Tinkar.FieldDefinitionDTO.#ctor(Newtonsoft.Json.Linq.JObject)">
            <summary>
            Initializes a new instance of the <see cref="T:Tinkar.FieldDefinitionDTO"/> class
            from json stream.
            </summary>
            <param name="jObj">JSON parent container to read from.</param>
        </member>
        <member name="M:Tinkar.FieldDefinitionDTO.CompareTo(Tinkar.FieldDefinitionDTO)">
            <summary>
            Compare this with another item of same type.
            </summary>
            <param name="other">Item to compare to for equality.</param>
            <returns> -1, 0, or 1.</returns>
        </member>
        <member name="M:Tinkar.FieldDefinitionDTO.Make(Tinkar.TinkarInput)">
            <summary>
            Static method to Create DTO item from input stream.
            </summary>
            <param name="input">input data stream.</param>
            <returns>new DTO item.</returns>
        </member>
        <member name="M:Tinkar.FieldDefinitionDTO.Marshal(Tinkar.TinkarOutput)">
            <summary>
            Marshal DTO item to output stream.
            </summary>
            <param name="output">output data stream.</param>
        </member>
        <member name="M:Tinkar.FieldDefinitionDTO.Make(Newtonsoft.Json.Linq.JObject)">
            <summary>
            Static method to Create DTO item from input json stream.
            </summary>
            <param name="input">input data stream.</param>
            <returns>new DTO item.</returns>
        </member>
        <member name="M:Tinkar.FieldDefinitionDTO.Marshal(Tinkar.TinkarJsonOutput)">
            <summary>
            Marshal all fields to Json output stream.
            </summary>
            <param name="output">Json output stream.</param>
        </member>
        <member name="T:Tinkar.IdentifiedThingDTO">
            <summary>
            Tinkar IdentifiedThing record.
            </summary>
        </member>
        <member name="P:Tinkar.IdentifiedThingDTO.ComponentUuids">
            <summary>
            Gets Component UUIDs.
            </summary>
        </member>
        <member name="M:Tinkar.IdentifiedThingDTO.#ctor(System.Collections.Generic.IEnumerable{System.Guid})">
            <summary>
            Initializes a new instance of the <see cref="T:Tinkar.IdentifiedThingDTO"/> class.
            </summary>
            <param name="componentUuids">ComponentUuids.</param>
        </member>
        <member name="M:Tinkar.IdentifiedThingDTO.CompareTo(Tinkar.IdentifiedThingDTO)">
            <summary>
            Compares this to another item.
            </summary>
            <param name="other">Item to compare to.</param>
            <returns>-1, 0, or 1.</returns>
        </member>
        <member name="T:Tinkar.IEquivalent`1">
            <summary>
            IEquivalent.
            Tests if two items are the 'same'. This looks at actual values,
            not references, to determine equivalency.
            </summary>
            <typeparam name="T">Type of objects to check for equivalence.</typeparam>
        </member>
        <member name="M:Tinkar.IEquivalent`1.IsEquivalent(`0)">
            <summary>
            Returns true if 'this' item is equivalent to 'other'
            item.
            </summary>
            <param name="other">other item to compare equivalence to.</param>
            <returns>true if two items are equivalent.</returns>
        </member>
        <member name="T:Tinkar.SemanticChronologyDTO">
            <summary>
            Tinkar Semantic Chronology record.
            </summary>
        </member>
        <member name="F:Tinkar.SemanticChronologyDTO.MarshalVersion">
            <summary>
            Version of marshalling code.
            If code is modified in a way that renders old serialized data
            non-conformant, then this number should be incremented.
            </summary>
        </member>
        <member name="F:Tinkar.SemanticChronologyDTO.JsonClassName">
            <summary>
            Name of this class in JSON serialization.
            This must be consistent with Java implementation.
            </summary>
        </member>
        <member name="P:Tinkar.SemanticChronologyDTO.DefinitionForSemanticUuids">
            <summary>
            Gets DefinitionForSemantic UUIDs.
            </summary>
        </member>
        <member name="P:Tinkar.SemanticChronologyDTO.ReferencedComponentUuids">
            <summary>
            Gets ReferencedComponent UUIDs.
            </summary>
        </member>
        <member name="P:Tinkar.SemanticChronologyDTO.SemanticVersions">
            <summary>
            Gets SemanticVersion.
            </summary>
        </member>
        <member name="P:Tinkar.SemanticChronologyDTO.ComponentUuids">
            <summary>
            Gets Componend UUIDs.
            </summary>
        </member>
        <member name="P:Tinkar.SemanticChronologyDTO.ReferencedComponent">
            <summary>
            Gets ReferencedComponent.
            </summary>
        </member>
        <member name="P:Tinkar.SemanticChronologyDTO.DefinitionForSemantic">
            <summary>
            Gets DefinitionForSemantic.
            </summary>
        </member>
        <member name="P:Tinkar.SemanticChronologyDTO.Versions">
            <summary>
            Gets Versions.
            </summary>
        </member>
        <member name="P:Tinkar.SemanticChronologyDTO.ChronologySet">
            <summary>
            Gets ChronologySet.
            </summary>
        </member>
        <member name="M:Tinkar.SemanticChronologyDTO.#ctor(System.Collections.Generic.IEnumerable{System.Guid},System.Collections.Generic.IEnumerable{System.Guid},System.Collections.Generic.IEnumerable{System.Guid},System.Collections.Generic.IEnumerable{Tinkar.SemanticVersionDTO})">
            <summary>
            Initializes a new instance of the <see cref="T:Tinkar.SemanticChronologyDTO"/> class.
            </summary>
            <param name="componentUuids">ComponentUuids.</param>
            <param name="definitionForSemanticUuids">definitionForSemanticUuids.</param>
            <param name="referencedComponentUuids">ReferencedComponentUuids.</param>
            <param name="semanticVersions">SemanticVersions.</param>
        </member>
        <member name="M:Tinkar.SemanticChronologyDTO.#ctor(Tinkar.TinkarInput)">
            <summary>
            Initializes a new instance of the <see cref="T:Tinkar.SemanticChronologyDTO"/> class
            from binary stream.
            </summary>
            <param name="input">input data stream.</param>
        </member>
        <member name="M:Tinkar.SemanticChronologyDTO.#ctor(Newtonsoft.Json.Linq.JObject)">
            <summary>
            Initializes a new instance of the <see cref="T:Tinkar.SemanticChronologyDTO"/> class
            from json stream.
            </summary>
            <param name="jObj">JSON parent container to read from.</param>
        </member>
        <member name="M:Tinkar.SemanticChronologyDTO.#ctor(System.Collections.Generic.IEnumerable{System.Guid},Tinkar.IDefinitionForSemantic,Tinkar.IIdentifiedThing,System.Collections.Generic.IEnumerable{Tinkar.SemanticVersionDTO})">
            <summary>
            Initializes a new instance of the <see cref="T:Tinkar.SemanticChronologyDTO"/> class.
            </summary>
            <param name="componentUuids">ComponentUuids.</param>
            <param name="definitionForSemantic">definitionForSemanticUuids.</param>
            <param name="referencedComponent">ReferencedComponentUuids.</param>
            <param name="semanticVersions">SemanticVersions.</param>
        </member>
        <member name="M:Tinkar.SemanticChronologyDTO.CompareTo(Tinkar.SemanticChronologyDTO)">
            <summary>
            Compares this to another item.
            </summary>
            <param name="other">Item to compare to.</param>
            <returns>-1, 0, or 1.</returns>
        </member>
        <member name="M:Tinkar.SemanticChronologyDTO.Make(Tinkar.TinkarInput)">
            <summary>
            Static method to Create DTO item from input stream.
            </summary>
            <param name="input">input data stream.</param>
            <returns>new DTO item.</returns>
        </member>
        <member name="M:Tinkar.SemanticChronologyDTO.Marshal(Tinkar.TinkarOutput)">
            <summary>
            Marshal DTO item to output stream.
            </summary>
            <param name="output">output data stream.</param>
        </member>
        <member name="M:Tinkar.SemanticChronologyDTO.Make(Newtonsoft.Json.Linq.JObject)">
            <summary>
            Static method to Create DTO item from json stream.
            </summary>
            <param name="jObj">JSON parent container to read from.</param>
            <returns>Deserialized SemanticChronology record.</returns>
        </member>
        <member name="M:Tinkar.SemanticChronologyDTO.Marshal(Tinkar.TinkarJsonOutput)">
            <summary>
            Marshal all fields to Json output stream.
            </summary>
            <param name="output">Json output stream.</param>
        </member>
        <member name="T:Tinkar.SemanticDTO">
            <summary>
            Semantic record.
            </summary>
        </member>
        <member name="F:Tinkar.SemanticDTO.MarshalVersion">
            <summary>
            Version of marshalling code.
            If code is modified in a way that renders old serialized data
            non-conformant, then this number should be incremented.
            </summary>
        </member>
        <member name="F:Tinkar.SemanticDTO.JsonClassName">
            <summary>
            Name of this class in JSON serialization.
            This must be consistent with Java implementation.
            </summary>
        </member>
        <member name="P:Tinkar.SemanticDTO.ComponentUuids">
            <summary>
            Gets ComponentUuids.
            </summary>
        </member>
        <member name="P:Tinkar.SemanticDTO.ReferencedComponent">
            <summary>
            Gets ReferencedComponent.
            </summary>
        </member>
        <member name="P:Tinkar.SemanticDTO.DefinitionForSemantic">
            <summary>
            Gets DefinitionForSemantic.
            </summary>
        </member>
        <member name="P:Tinkar.SemanticDTO.DefinitionForSemanticUuids">
            <summary>
            Gets DefinitionForSemantic UUIDs.
            </summary>
        </member>
        <member name="P:Tinkar.SemanticDTO.ReferencedComponentUuids">
            <summary>
            Gets ReferencedComponent UUIDs.
            </summary>
        </member>
        <member name="M:Tinkar.SemanticDTO.#ctor(System.Collections.Generic.IEnumerable{System.Guid},System.Collections.Generic.IEnumerable{System.Guid},System.Collections.Generic.IEnumerable{System.Guid})">
            <summary>
            Initializes a new instance of the <see cref="T:Tinkar.SemanticDTO"/> class.
            </summary>
            <param name="componentUuids">ComponentUuids.</param>
            <param name="definitionForSemanticUuids">DefinitionForSemanticUuids.</param>
            <param name="referencedComponentUuids">ReferencedComponentUuids.</param>
        </member>
        <member name="M:Tinkar.SemanticDTO.#ctor(Tinkar.TinkarInput)">
            <summary>
            Initializes a new instance of the <see cref="T:Tinkar.SemanticDTO"/> class
            from binary stream.
            </summary>
            <param name="input">input data stream.</param>
        </member>
        <member name="M:Tinkar.SemanticDTO.#ctor(Newtonsoft.Json.Linq.JObject)">
            <summary>
            Initializes a new instance of the <see cref="T:Tinkar.SemanticDTO"/> class
            from json stream.
            </summary>
            <param name="jObj">JSON parent container to read from.</param>
        </member>
        <member name="M:Tinkar.SemanticDTO.CompareTo(Tinkar.SemanticDTO)">
            <summary>
            Compares this to another item.
            </summary>
            <param name="other">Item to compare to.</param>
            <returns>-1, 0, or 1.</returns>
        </member>
        <member name="M:Tinkar.SemanticDTO.Make(Tinkar.TinkarInput)">
            <summary>
            Static method to Create DTO item from input stream.
            </summary>
            <param name="input">input data stream.</param>
            <returns>new DTO item.</returns>
        </member>
        <member name="M:Tinkar.SemanticDTO.Marshal(Tinkar.TinkarOutput)">
            <summary>
            Marshal DTO item to output stream.
            </summary>
            <param name="output">output data stream.</param>
        </member>
        <member name="M:Tinkar.SemanticDTO.Make(Newtonsoft.Json.Linq.JObject)">
            <summary>
            Static method to Create DTO item from json .
            </summary>
            <param name="jObj">JSON parent container to read from.</param>
            <returns>Deserialized Semantic record.</returns>
        </member>
        <member name="M:Tinkar.SemanticDTO.Marshal(Tinkar.TinkarJsonOutput)">
            <summary>
            Marshal all fields to Json output stream.
            </summary>
            <param name="output">Json output stream.</param>
        </member>
        <member name="T:Tinkar.SemanticVersionDTO">
            <summary>
            Tinkar SemanticVersion record.
            </summary>
        </member>
        <member name="F:Tinkar.SemanticVersionDTO.MarshalVersion">
            <summary>
            Version of marshalling code.
            If code is modified in a way that renders old serialized data
            non-conformant, then this number should be incremented.
            </summary>
        </member>
        <member name="F:Tinkar.SemanticVersionDTO.JsonClassName">
            <summary>
            Name of this class in JSON serialization.
            This must be consistent with Java implementation.
            </summary>
        </member>
        <member name="P:Tinkar.SemanticVersionDTO.Stamp">
            <summary>
            Gets Stamp.
            </summary>
        </member>
        <member name="P:Tinkar.SemanticVersionDTO.ReferencedComponent">
            <summary>
            Gets ReferencedComponent.
            </summary>
        </member>
        <member name="P:Tinkar.SemanticVersionDTO.DefinitionForSemantic">
            <summary>
            Gets DefinitionForSemantic.
            </summary>
        </member>
        <member name="P:Tinkar.SemanticVersionDTO.ComponentUuids">
            <summary>
            Gets Component UUIDs.
            </summary>
        </member>
        <member name="P:Tinkar.SemanticVersionDTO.Fields">
            <summary>
            Gets Fields array.
            </summary>
        </member>
        <member name="P:Tinkar.SemanticVersionDTO.DefinitionForSemanticUuids">
            <summary>
            Gets DefinitionForSemantic UUID's.
            </summary>
        </member>
        <member name="P:Tinkar.SemanticVersionDTO.ReferencedComponentUuids">
            <summary>
            Gets ReferencedComponent Uuids.
            </summary>
        </member>
        <member name="P:Tinkar.SemanticVersionDTO.StampDTO">
            <summary>
            Gets Stamp.
            </summary>
        </member>
        <member name="M:Tinkar.SemanticVersionDTO.#ctor(System.Collections.Generic.IEnumerable{System.Guid},System.Collections.Generic.IEnumerable{System.Guid},System.Collections.Generic.IEnumerable{System.Guid},Tinkar.StampDTO,System.Collections.Generic.IEnumerable{System.Object})">
            <summary>
            Initializes a new instance of the <see cref="T:Tinkar.SemanticVersionDTO"/> class.
            </summary>
            <param name="componentUuids">ComponentUuids.</param>
            <param name="definitionForSemanticUuids">DefinitionForSemanticUuids.</param>
            <param name="referencedComponentUuids">ReferencedComponentUuids.</param>
            <param name="stampDTO">StampDTO.</param>
            <param name="fields">Fields.</param>
        </member>
        <member name="M:Tinkar.SemanticVersionDTO.#ctor(Newtonsoft.Json.Linq.JObject,System.Collections.Generic.IEnumerable{System.Guid},System.Collections.Generic.IEnumerable{System.Guid},System.Collections.Generic.IEnumerable{System.Guid})">
            <summary>
            Initializes a new instance of the <see cref="T:Tinkar.SemanticVersionDTO"/> class
            from json stream.
            </summary>
            <param name="jObj">JSON parent container.</param>
            <param name="componentUuids">Component UUIDs.</param>
            <param name="definitionForSemanticUuids">DefinitionForSemantic UUIDs.</param>
            <param name="referencedComponentUuids">ReferencedComponent UUIDs.</param>
        </member>
        <member name="M:Tinkar.SemanticVersionDTO.#ctor(Tinkar.TinkarInput,System.Collections.Generic.IEnumerable{System.Guid},System.Collections.Generic.IEnumerable{System.Guid},System.Collections.Generic.IEnumerable{System.Guid})">
            <summary>
            Initializes a new instance of the <see cref="T:Tinkar.SemanticVersionDTO"/> class
            from binary stream.
            </summary>
            <param name="input">Binary input stream to read from.</param>
            <param name="componentUuids">Component UUIDs.</param>
            <param name="definitionForSemanticUuids">DefinitionForSemantic UUIDs.</param>
            <param name="referencedComponentUuids">ReferencedComponent UUIDs.</param>
        </member>
        <member name="M:Tinkar.SemanticVersionDTO.#ctor(System.Collections.Generic.IEnumerable{System.Guid},Tinkar.IDefinitionForSemantic,Tinkar.IIdentifiedThing,Tinkar.IStamp,System.Collections.Generic.IEnumerable{System.Object})">
            <summary>
            Initializes a new instance of the <see cref="T:Tinkar.SemanticVersionDTO"/> class.
            </summary>
            <param name="componentUuids">Component UUIDs.</param>
            <param name="definitionForSemantic">DefinitionForSemantic UUIDs.</param>
            <param name="referencedComponent">ReferencedComponent UUIDs.</param>
            <param name="stamp">Stamp.</param>
            <param name="fields">SemanticVersion fields.</param>
        </member>
        <member name="M:Tinkar.SemanticVersionDTO.CompareTo(Tinkar.SemanticVersionDTO)">
            <summary>
            Compare this with another item of same type.
            </summary>
            <param name="other">Item to compare to for equality.</param>
            <returns> -1, 0, or 1.</returns>
        </member>
        <member name="M:Tinkar.SemanticVersionDTO.Make(Tinkar.TinkarInput,System.Collections.Generic.IEnumerable{System.Guid},System.Collections.Generic.IEnumerable{System.Guid},System.Collections.Generic.IEnumerable{System.Guid})">
            <summary>
            Static method to Create DTO item from input stream.
            </summary>
            <param name="input">input data stream.</param>
            <param name="componentUuids">Component UUIDs.</param>
            <param name="definitionForSemanticUuids">DefinitionForSemantic UUIDs.</param>
            <param name="referencedComponentUuids">ReferencedComponent UUIDs.</param>
            <returns>new DTO item.</returns>
        </member>
        <member name="M:Tinkar.SemanticVersionDTO.Marshal(Tinkar.TinkarOutput)">
            <summary>
            Marshal DTO item to output stream.
            </summary>
            <param name="output">output data stream.</param>
        </member>
        <member name="M:Tinkar.SemanticVersionDTO.Make(Newtonsoft.Json.Linq.JObject,System.Collections.Generic.IEnumerable{System.Guid},System.Collections.Generic.IEnumerable{System.Guid},System.Collections.Generic.IEnumerable{System.Guid})">
            <summary>
            Static method to Create DTO item from json .
            </summary>
            <param name="jObj">JSON parent container.</param>
            <param name="componentUuids">Component UUIDs.</param>
            <param name="definitionForSemanticUuids">DefinitionForSemantic UUIDs.</param>
            <param name="referencedComponentUuids">ReferencedComponent UUIDs.</param>
            <returns>Deserialized SemanticVersion record.</returns>
        </member>
        <member name="M:Tinkar.SemanticVersionDTO.Marshal(Tinkar.TinkarJsonOutput)">
            <summary>
            Marshal all fields to Json output stream.
            </summary>
            <param name="output">Json output stream.</param>
        </member>
        <member name="T:Tinkar.StampCommentDTO">
            <summary>
            Tinkar StampComment record.
            </summary>
        </member>
        <member name="F:Tinkar.StampCommentDTO.MarshalVersion">
            <summary>
            Version of marshalling code.
            If code is modified in a way that renders old serialized data
            non-conformant, then this number should be incremented.
            </summary>
        </member>
        <member name="F:Tinkar.StampCommentDTO.JsonClassName">
            <summary>
            Name of this class in JSON serialization.
            This must be consistent with Java implementation.
            </summary>
        </member>
        <member name="P:Tinkar.StampCommentDTO.StampDTO">
            <summary>
            Gets Stamp.
            </summary>
        </member>
        <member name="P:Tinkar.StampCommentDTO.Stamp">
            <summary>
            Gets Stamp.
            </summary>
        </member>
        <member name="P:Tinkar.StampCommentDTO.Comment">
            <summary>
            Gets Comment.
            </summary>
        </member>
        <member name="M:Tinkar.StampCommentDTO.#ctor(Tinkar.StampDTO,System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Tinkar.StampCommentDTO"/> class.
            </summary>
            <param name="stampDTO">StampDTO.</param>
            <param name="comment">Comment.</param>
        </member>
        <member name="M:Tinkar.StampCommentDTO.#ctor(Tinkar.TinkarInput)">
            <summary>
            Initializes a new instance of the <see cref="T:Tinkar.StampCommentDTO"/> class
            from binary stream.
            </summary>
            <param name="input">input data stream.</param>
        </member>
        <member name="M:Tinkar.StampCommentDTO.#ctor(Newtonsoft.Json.Linq.JObject)">
            <summary>
            Initializes a new instance of the <see cref="T:Tinkar.StampCommentDTO"/> class
            from json stream.
            </summary>
            <param name="jObj">JSON parent container to read from.</param>
        </member>
        <member name="M:Tinkar.StampCommentDTO.CompareTo(Tinkar.StampCommentDTO)">
            <summary>
            Compare this with another item of same type.
            </summary>
            <param name="other">Item to compare to for equality.</param>
            <returns> -1, 0, or 1.</returns>
        </member>
        <member name="M:Tinkar.StampCommentDTO.Make(Tinkar.TinkarInput)">
            <summary>
            Static method to Create DTO item from input stream.
            </summary>
            <param name="input">input data stream.</param>
            <returns>new DTO item.</returns>
        </member>
        <member name="M:Tinkar.StampCommentDTO.Marshal(Tinkar.TinkarOutput)">
            <summary>
            Marshal DTO item to output stream.
            </summary>
            <param name="output">output data stream.</param>
        </member>
        <member name="M:Tinkar.StampCommentDTO.Make(Newtonsoft.Json.Linq.JObject)">
            <summary>
            Static method to Create DTO item from json stream.
            </summary>
            <param name="jObj">JSON parent container.</param>
            <returns>new DTO item.</returns>
        </member>
        <member name="M:Tinkar.StampCommentDTO.Marshal(Tinkar.TinkarJsonOutput)">
            <summary>
            Marshal all fields to Json output stream.
            </summary>
            <param name="output">Json output stream.</param>
        </member>
        <member name="T:Tinkar.StampDTO">
            <summary>
            Stamp record.
            </summary>
        </member>
        <member name="F:Tinkar.StampDTO.MarshalVersion">
            <summary>
            Version of marshalling code.
            If code is modified in a way that renders old serialized data
            non-conformant, then this number should be incremented.
            </summary>
        </member>
        <member name="P:Tinkar.StampDTO.StatusUuids">
            <summary>
            Gets Status UUIDs.
            </summary>
        </member>
        <member name="P:Tinkar.StampDTO.AuthorUuids">
            <summary>
            Gets Author UUIDs.
            </summary>
        </member>
        <member name="P:Tinkar.StampDTO.ModuleUuids">
            <summary>
            Gets Module UUIDs.
            </summary>
        </member>
        <member name="P:Tinkar.StampDTO.PathUuids">
            <summary>
            Gets Path UUIDs.
            </summary>
        </member>
        <member name="P:Tinkar.StampDTO.Time">
            <summary>
            Gets Time.
            </summary>
        </member>
        <member name="P:Tinkar.StampDTO.Status">
            <summary>
            Gets Status.
            </summary>
        </member>
        <member name="P:Tinkar.StampDTO.Author">
            <summary>
            Gets Author.
            </summary>
        </member>
        <member name="P:Tinkar.StampDTO.Module">
            <summary>
            Gets Module.
            </summary>
        </member>
        <member name="P:Tinkar.StampDTO.Path">
            <summary>
            Gets Path.
            </summary>
        </member>
        <member name="M:Tinkar.StampDTO.#ctor(System.Collections.Generic.IEnumerable{System.Guid},System.DateTime,System.Collections.Generic.IEnumerable{System.Guid},System.Collections.Generic.IEnumerable{System.Guid},System.Collections.Generic.IEnumerable{System.Guid})">
            <summary>
            Initializes a new instance of the <see cref="T:Tinkar.StampDTO"/> class.
            </summary>
            <param name="statusUuids">StatusUuids.</param>
            <param name="time">Time.</param>
            <param name="authorUuids">AuthorUuids.</param>
            <param name="moduleUuids">ModuleUuids.</param>
            <param name="pathUuids">PathUuids.</param>
        </member>
        <member name="M:Tinkar.StampDTO.#ctor(Tinkar.TinkarInput)">
            <summary>
            Initializes a new instance of the <see cref="T:Tinkar.StampDTO"/> class
            from binary stream.
            </summary>
            <param name="input">input data stream.</param>
        </member>
        <member name="M:Tinkar.StampDTO.#ctor(Newtonsoft.Json.Linq.JObject)">
            <summary>
            Initializes a new instance of the <see cref="T:Tinkar.StampDTO"/> class
            from json stream.
            </summary>
            <param name="jObj">JSON parent container to read from.</param>
        </member>
        <member name="M:Tinkar.StampDTO.CompareTo(Tinkar.StampDTO)">
            <summary>
            Compare this with another item of same type.
            </summary>
            <param name="other">Item to compare to for equality.</param>
            <returns> -1, 0, or 1.</returns>
        </member>
        <member name="M:Tinkar.StampDTO.Make(Tinkar.TinkarInput)">
            <summary>
            Static method to Create DTO item from input stream.
            </summary>
            <param name="input">input data stream.</param>
            <returns>new DTO item.</returns>
        </member>
        <member name="M:Tinkar.StampDTO.Make(Newtonsoft.Json.Linq.JObject)">
            <summary>
            Static method to Create DTO item from json stream.
            </summary>
            <param name="jObj">JSON parent container to read from.</param>
            <returns>Deserialized Stamp record.</returns>
        </member>
        <member name="M:Tinkar.StampDTO.Marshal(Tinkar.TinkarOutput)">
            <summary>
            Marshal DTO item to output stream.
            </summary>
            <param name="output">output data stream.</param>
        </member>
        <member name="M:Tinkar.StampDTO.Marshal(Tinkar.TinkarJsonOutput)">
            <summary>
            Marshal all fields to Json output stream.
            </summary>
            <param name="output">Json output stream.</param>
        </member>
        <member name="T:Tinkar.JavaAttribute">
            <summary>
            Marks a class, method, or property as being a mirror of a
            java item of the indicated name.
            This is used to do automatic code normalization using roslyn tools.
            </summary>
        </member>
        <member name="P:Tinkar.JavaAttribute.JavaName">
            <summary>
            Gets os sets name of java item that this is a mirror of.
            </summary>
        </member>
        <member name="M:Tinkar.JavaAttribute.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Tinkar.JavaAttribute"/> class.
            </summary>
            <param name="javaName">Name of java item that this is a mirror of.</param>
        </member>
        <member name="T:Tinkar.ComponentFieldForJson">
            <summary>
            Definitions used in JSON serialization.
            </summary>
        </member>
        <member name="F:Tinkar.ComponentFieldForJson.AUTHOR_UUIDS">
            <summary>
            Name of JSON property that stores author UUIDs.
            </summary>
        </member>
        <member name="F:Tinkar.ComponentFieldForJson.CHRONOLOGY_SET_UUIDS">
            <summary>
            Name of JSON property that stores chronology set UUIDs.
            </summary>
        </member>
        <member name="F:Tinkar.ComponentFieldForJson.CLASS">
            <summary>
            Name of JSON property that stores class name.
            </summary>
        </member>
        <member name="F:Tinkar.ComponentFieldForJson.COMMENT">
            <summary>
            Name of JSON property that stores comment string.
            </summary>
        </member>
        <member name="F:Tinkar.ComponentFieldForJson.COMPONENT_UUIDS">
            <summary>
            Name of JSON property that stores component UUIDs.
            </summary>
        </member>
        <member name="F:Tinkar.ComponentFieldForJson.CONCEPT_VERSIONS">
            <summary>
            Name of JSON property that stores concept version UUIDs.
            </summary>
        </member>
        <member name="F:Tinkar.ComponentFieldForJson.DATATYPE_UUIDS">
            <summary>
            Name of JSON property that stores data type UUIDs.
            </summary>
        </member>
        <member name="F:Tinkar.ComponentFieldForJson.DEFINITION_FOR_SEMANTIC_UUIDS">
            <summary>
            Name of JSON property that stores definition for semantic UUIDs.
            </summary>
        </member>
        <member name="F:Tinkar.ComponentFieldForJson.DEFINITION_VERSIONS">
            <summary>
            Name of JSON property that stores definition version records.
            </summary>
        </member>
        <member name="F:Tinkar.ComponentFieldForJson.FIELDS">
            <summary>
            Name of JSON property that stores fiekds array.
            </summary>
        </member>
        <member name="F:Tinkar.ComponentFieldForJson.FIELD_DEFINITIONS">
            <summary>
            Name of JSON property that stores field definition records UUIDs.
            </summary>
        </member>
        <member name="F:Tinkar.ComponentFieldForJson.MODULE_UUIDS">
            <summary>
            Name of JSON property that stores module UUIDs.
            </summary>
        </member>
        <member name="F:Tinkar.ComponentFieldForJson.PATH_UUIDS">
            <summary>
            Name of JSON property that stores path UUIDs.
            </summary>
        </member>
        <member name="F:Tinkar.ComponentFieldForJson.PURPOSE_UUIDS">
            <summary>
            Name of JSON property that stores purpose UUIDs.
            </summary>
        </member>
        <member name="F:Tinkar.ComponentFieldForJson.REFERENCED_COMPONENT_PURPOSE_UUIDS">
            <summary>
            Name of JSON property that stores referenced component purpose UUIDs.
            </summary>
        </member>
        <member name="F:Tinkar.ComponentFieldForJson.REFERENCED_COMPONENT_UUIDS">
            <summary>
            Name of JSON property that stores referenced component UUIDs.
            </summary>
        </member>
        <member name="F:Tinkar.ComponentFieldForJson.STAMP">
            <summary>
            Name of JSON property that stores stamp record.
            </summary>
        </member>
        <member name="F:Tinkar.ComponentFieldForJson.STATUS_UUIDS">
            <summary>
            Name of JSON property that stores status UUIDs.
            </summary>
        </member>
        <member name="F:Tinkar.ComponentFieldForJson.TIME">
            <summary>
            Name of JSON property that stores time field.
            </summary>
        </member>
        <member name="F:Tinkar.ComponentFieldForJson.USE_UUIDS">
            <summary>
            Name of JSON property that stores use UUIDs.
            </summary>
        </member>
        <member name="F:Tinkar.ComponentFieldForJson.VERSIONS">
            <summary>
            Name of JSON property that stores versions record.
            </summary>
        </member>
        <member name="T:Tinkar.IJsonMarshalable">
            <summary>
            Interface for all classes that marshal to and from JSON streams.
            </summary>
        </member>
        <member name="M:Tinkar.IJsonMarshalable.Marshal(Tinkar.TinkarJsonOutput)">
            <summary>
            Marshal all fields to Json output stream.
            </summary>
            <param name="output">Json output stream.</param>
        </member>
        <member name="T:Tinkar.JObjectExtensions">
            <summary>
            Json extension methods.
            </summary>
        </member>
        <member name="F:Tinkar.JObjectExtensions.TErr">
            <summary>
            Common error message header.
            </summary>
        </member>
        <member name="M:Tinkar.JObjectExtensions.GetClass(Newtonsoft.Json.Linq.JObject,System.String)">
            <summary>
            Get class name as defined by child string property 'class'.
            Throw exception if class name does not match expected value.
            </summary>
            <param name="jObj">JSON parent container.</param>
            <param name="expectedClassName">expected class name.</param>
        </member>
        <member name="M:Tinkar.JObjectExtensions.ReadToken``1(Newtonsoft.Json.Linq.JObject,System.String)">
            <summary>
            Get child token of expected type and name.
            If child property does not exist an exception is thrown.
            If child item exists and
            is of incorrect type an exception is thrown.
            </summary>
            <typeparam name="T">Expectfed type of json token.</typeparam>
            <param name="jObj">JSON parent container.</param>
            <param name="tokenName">child property name.</param>
            <returns>JSON token.</returns>
        </member>
        <member name="M:Tinkar.JObjectExtensions.ReadInstant(Newtonsoft.Json.Linq.JObject,System.String)">
            <summary>
            Read DateTime value from the named child property.
            </summary>
            <param name="jObj">JSON parent container.</param>
            <param name="propertyName">child property name.</param>
            <returns>Date time value.</returns>
        </member>
        <member name="M:Tinkar.JObjectExtensions.ReadString(Newtonsoft.Json.Linq.JObject,System.String)">
            <summary>
            Read String value from the named child property.
            </summary>
            <param name="jObj">JSON parent container.</param>
            <param name="propertyName">child property name.</param>
            <returns>String value.</returns>
        </member>
        <member name="M:Tinkar.JObjectExtensions.ReadUuids(Newtonsoft.Json.Linq.JObject,System.String)">
            <summary>
            Read Guid values from the named child property.
            </summary>
            <param name="jObj">JSON parent container.</param>
            <param name="propertyName">child property name.</param>
            <returns>Guid values.</returns>
        </member>
        <member name="M:Tinkar.JObjectExtensions.ReadObjects(Newtonsoft.Json.Linq.JObject,System.String)">
            <summary>
            Read Object values from the named child property.
            </summary>
            <param name="jObj">JSON parent container.</param>
            <param name="propertyName">child property name.</param>
            <returns>Object values.</returns>
        </member>
        <member name="M:Tinkar.JObjectExtensions.ReadDefinitionForSemanticVersionList(Newtonsoft.Json.Linq.JObject,System.Collections.Generic.IEnumerable{System.Guid})">
            <summary>
            Read DefinitionForSemanticVersionDTO values from the named child property.
            </summary>
            <param name="jObj">JSON parent container.</param>
            <param name="componentUuids">Externally defined component uuids.</param>
            <returns>Definition for semantic version values.</returns>
        </member>
        <member name="M:Tinkar.JObjectExtensions.ReadFieldDefinitionList(Newtonsoft.Json.Linq.JObject)">
            <summary>
            Read FieldDefinitionDTO values from the named child property.
            </summary>
            <param name="jObj">JSON parent container.</param>
            <returns>Field definition values.</returns>
        </member>
        <member name="M:Tinkar.JObjectExtensions.ReadConceptVersionList(Newtonsoft.Json.Linq.JObject,System.Collections.Generic.IEnumerable{System.Guid})">
            <summary>
            Read ConceptVersionDTO values from the named child property.
            </summary>
            <param name="jObj">JSON parent container.</param>
            <param name="componentUuids">Externally defined component uuids.</param>
            <returns>Concept version values.</returns>
        </member>
        <member name="M:Tinkar.JObjectExtensions.ReadSemanticVersionList(Newtonsoft.Json.Linq.JObject,System.Collections.Generic.IEnumerable{System.Guid},System.Collections.Generic.IEnumerable{System.Guid},System.Collections.Generic.IEnumerable{System.Guid})">
            <summary>
            Read SemanticVersionDTO values from the named child property.
            </summary>
            <param name="jObj">JSON parent container.</param>
            <param name="componentUuids">Externally defined component uuids.</param>
            <param name="definitionForSemanticUuids">Externally defined definition for semantic uuids.</param>
            <param name="referencedComponentUuids">Externally defined referenced component uuids.</param>
            <returns>Semantic version values.</returns>
        </member>
        <member name="M:Tinkar.JObjectExtensions.ReadJsonMarshable(Newtonsoft.Json.Linq.JObject)">
            <summary>
            Read IJsonMarshalable values from the named child property.
            </summary>
            <param name="jObj">JSON parent container.</param>
            <returns>IJsonMarshalable values.</returns>
        </member>
        <member name="T:Tinkar.TinkarJsonInput">
            <summary>
            Parses JSON into Tinkar records.
            </summary>
        </member>
        <member name="M:Tinkar.TinkarJsonInput.#ctor(System.IO.Stream)">
            <summary>
            Initializes a new instance of the <see cref="T:Tinkar.TinkarJsonInput"/> class.
            </summary>
            <param name="inStream">Stream of json data.</param>
        </member>
        <member name="M:Tinkar.TinkarJsonInput.Dispose">
            <summary>
            Dispose method. Releases reference to stream.
            </summary>
        </member>
        <member name="M:Tinkar.TinkarJsonInput.ReadJsonObject">
            <summary>
            Read a JSON JObject from stream and return it.
            </summary>
            <returns>Read JObject.</returns>
        </member>
        <member name="T:Tinkar.TinkarJsonOutput">
            <summary>
            Serializes Tinkar records into JSON objects.
            </summary>
        </member>
        <member name="M:Tinkar.TinkarJsonOutput.#ctor(System.IO.Stream,System.Boolean)">
            <summary>
            Initializes a new instance of the <see cref="T:Tinkar.TinkarJsonOutput"/> class.
            </summary>
            <param name="outStream">output stream.</param>
            <param name="formatted">if true, json is formatted to be easily readable.</param>
        </member>
        <member name="M:Tinkar.TinkarJsonOutput.WriteStartObject">
            <summary>
            Write JSON start object tag.
            </summary>
        </member>
        <member name="M:Tinkar.TinkarJsonOutput.WriteEndObject">
            <summary>
            Write JSON end object tag.
            </summary>
        </member>
        <member name="M:Tinkar.TinkarJsonOutput.WritePropertyName(System.String)">
            <summary>
            Created JSON child property with the indicated name.
            This does not assign a value to that property.
            </summary>
            <param name="propertyName">Name of property to create.</param>
        </member>
        <member name="M:Tinkar.TinkarJsonOutput.WriteObjects(System.String,System.Collections.Generic.IEnumerable{System.Object})">
            <summary>
            Write array of objects.
            </summary>
            <param name="propertyName">child property name.</param>
            <param name="fields">values to write.</param>
        </member>
        <member name="M:Tinkar.TinkarJsonOutput.WriteField(System.Object)">
            <summary>
            Write field to output stream.
            </summary>
            <param name="field">value to write.</param>
        </member>
        <member name="M:Tinkar.TinkarJsonOutput.WriteClass(System.String)">
            <summary>
            Write class property.
            </summary>
            <param name="className">name of class.</param>
        </member>
        <member name="M:Tinkar.TinkarJsonOutput.WriteMarshalableList(System.String,System.Collections.Generic.IEnumerable{Tinkar.IJsonMarshalable})">
            <summary>
            Write series of IMarshable records to json.
            </summary>
            <param name="propertyName">Name of property containing serialized records.</param>
            <param name="items">item to serialize.</param>
        </member>
        <member name="M:Tinkar.TinkarJsonOutput.WriteUuids(System.String,System.Collections.Generic.IEnumerable{System.Guid})">
            <summary>
            Write property that is array of guids.
            </summary>
            <param name="propertyName">Name of json property to write.</param>
            <param name="guids">Guids to write.</param>
        </member>
        <member name="M:Tinkar.TinkarJsonOutput.WriteInstant(System.String,System.DateTime)">
            <summary>
            Write property that is a date time.
            </summary>
            <param name="propertyName">Name of json property to write.</param>
            <param name="instant">value to write.</param>
        </member>
        <member name="M:Tinkar.TinkarJsonOutput.WriteUTF(System.String,System.String)">
            <summary>
            Write property that is a string.
            </summary>
            <param name="propertyName">JSON property name that value will be written to.</param>
            <param name="value">Value.</param>
        </member>
        <member name="M:Tinkar.TinkarJsonOutput.Dispose">
            <summary>
            Dispose method. Flushes output stream and sets stream to null.
            If dispose is not called, then cached output may not be properly
            flushed to output stream.
            </summary>
        </member>
        <member name="M:Tinkar.TinkarJsonOutput.WriteObjects(System.Collections.Generic.IEnumerable{System.Object})">
            <summary>
            Write array of objects.
            </summary>
            <param name="fields">Fields to write.</param>
        </member>
        <member name="T:InstantUtil">
            <summary>
            Instant (DateTime) utilities.
            </summary>
        </member>
        <member name="M:InstantUtil.Format(System.DateTime)">
            <summary>
            Create string representation of DateTime.
            This format must be compatible
            with Tinkar-java instant format.
            </summary>
            <param name="dateTime">value to make string from.</param>
            <returns>Strign represetnation of instant.</returns>
        </member>
        <member name="M:InstantUtil.Parse(System.String)">
            <summary>
            Parse string representation of DateTime into date time.
            This date time format must be compatible
            with Tinkar-java instant format.
            </summary>
            <param name="possibleInstant">instant string.</param>
            <returns>DateTime instance.</returns>
        </member>
    </members>
</doc>
